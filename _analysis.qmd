---
title: "Making an Election Forecast"
format: html
---

## Setup

Open the packages I need:

```{r}
library(tidyverse)
library(coolorrr)
set_theme()
set_palette(diverging = c("red3", "white", "steelblue"),
            binary = c("steelblue", "red3"))
```

Next, read in the data (source is MIT Harvard Dataverse):

```{r}
dt <- read_csv(
  here::here(
    "_data", 
    "countypres_2000-2020.csv"
  )
)
```

## Data wrangling

I need to get the data into tidy format and collapse it to the state level of analysis.

```{r}
dt |>
  ## first collapse by year, state, and party vote totals
  group_by(year, state, state_po, party) |>
  summarize(
    votes = sum(candidatevotes, na.rm = T),
    .groups = "drop"
  ) |>
  ## make party names lower case
  mutate(
    party = str_to_lower(party)
  ) |>
  ## next pivot the data by party
  pivot_wider(
    values_from = votes,
    names_from = party
  ) |>
  ## add a total votes column and keep rep and dem + all other votes
  mutate(
    total = rowSums(
      cbind(democrat, green, other, republican, libertarian),
      na.rm = T
    )
  ) |>
  select(year, state, state_po, democrat, republican, total) |>
  mutate(
    other = total - democrat - republican
  ) -> st_dt
```

```{r}
summary(st_dt)
```

## Exploratory analysis

```{r}
st_dt |>
  pivot_longer(democrat:other) |>
  group_by(year, name) |>
  summarize(
    value = sum(value)
  ) |>
  ggplot() +
  aes(x = year, y = value, color = name) +
  geom_point() +
  geom_line() +
  labs(
    x = "Election Year",
    y = "Total Ballots"
  ) +
  ggpal()
```

## Modelling

I'm going to use the democratic party margin in the previous election to predict the future margin. So I need to create a democratic margin variable and a previous election lag.

```{r}
st_dt |>
  ## create a democratic margin measure and a lagged version of it
  group_by(state) |>
  mutate(
    dem_margin = 100 * (democrat / (democrat + republican) - 0.5),
    dem_margin_lag = lag(dem_margin, order_by = year)
  ) |>
  ungroup() -> st_dt
```

My predictive model is going to be a multi-level linear regression with fixed and random slopes by state for the lagged democratic vote margin as the main predictor. The model will also include random state intercepts. 

```{r}
## specify a multilevel model of the democratic margin with
## nesting within states.
library(lme4)
lmer(
  dem_margin ~ ## dem_margin is the outcome
    dem_margin_lag + ## lag of dem margin FE
    (dem_margin_lag | state), ## REs by state
  data = st_dt
) -> mefit

## check out the results
summary(mefit) ## model summary
MuMIn::r.squaredGLMM(mefit) ## R-squared
```

Looks like the previous election margin for the dems is a pretty good predictor of their future performance. Of course the R-squared is in-sample so it's not an ideal measure of the model's predictive performance. That metric will only be available when I get to test my predictions against the actual election returns for 2024. I'm basically running blind.

## Quantifying uncertainty

To get a sense for the range of empirically supported predictions from the model, I'm going to bootstrap to generate a distribution of predictions. With a multi-level model, bootstrapping is a computationally expensive but often necessary step to get standard errors for model predictions.

```{r}
## a function to re-sample states with replacement:
sample_by_state <- function() {
  st_dt |>
    group_split(state) |>
    sample(51, T) |>
    bind_rows()
}

## boot strap the data 10,000x and save in a tibble:
## (be patient)
tibble(
  it = 1:10000,
  bdata = map(
    .x = it,
    .f = ~ sample_by_state()
  ) 
) -> boot_dt

## re-estimate the model for each bootstrapped dataset:
## (be patient...probably shoulda' done parallel computing)
boot_dt |>
  mutate(
    bfit = map(
      .x = bdata,
      .f = ~ lmer(
        dem_margin ~ 
          dem_margin_lag +
          (dem_margin_lag | state), 
        data = .x
      )
    )
  ) -> boot_dt
```

## Generate results

First, I need to generate a set of predictions for 2024.

```{r}
## make a new prediction dataset:
st_dt |>
  filter(year == 2020) |>
  transmute(
    state, state_po,
    dem_margin_lag = dem_margin
  ) -> nw_dt

## add a new column with predicted dem margins:
nw_dt |>
  mutate(
    pred = predict(mefit, nw_dt)
  ) -> nw_dt

## generate probabilities for dem victory with bootstrapped preds:
## (be patient again)
boot_dt |>
  mutate(
    pred_dt = map2(
      .x = bdata,
      .y = bfit,
      .f = ~ .x |> 
        filter(year == 2020) |>
        transmute(
          state, 
          state_po, 
          dem_margin_lag = dem_margin
        ) |>
        distinct() %>%
        mutate(
          pred = predict(.y, .)
        )
    )
  ) -> boot_dt

## generate state-level probabilities:
boot_dt |>
  select(pred_dt) |>
  unnest() |>
  group_by(state_po) |>
  summarize(
    prob_win = mean(pred >= 0)
  ) -> prob_dt

## merge in with nw_dt:
left_join(
  nw_dt,
  prob_dt
) -> nw_dt
```

Now to see how things shake out overall, I need to incorporate data on electoral college votes.

```{r}
read_csv(
  here::here(
    "_data",
    "Electoral_College.csv"
  )
) -> ec

colnames(ec) <- c("state", "state_po", "ecv")

left_join(
  nw_dt,
  ec |> select(-state)
) -> nw_dt
```

## Visualize the results

Make a geofactet of the predicted margin.

```{r}
library(geofacet)
library(grid)
nw_dt |>
  mutate(
    swing = ifelse(
      state_po %in% c(
        "GA", 
        "PA",
        "NC",
        "MI",
        "WI",
        "AZ",
        "NV"
      ),
      1, 0
    )
  ) -> nw_dt
ggplot(nw_dt) +
  aes(
    x = pred,
    y = 1,
    fill = pred,
    label = paste0(round(pred, 1), "%")
  ) +
  geom_tile(color = "black") +
  geom_tile(
    data = . %>% filter(swing == 1),
    color = "black", 
    size = 1
  ) +
  geom_text() +
  facet_geo(~ state_po,
            scales = "free") +
  #theme_void() +
  ggpal("diverging", "fill") +
  labs(
    x = NULL,
    y = NULL,
    title = paste0(
      "Predicted percentage point margin for\nKamala Harris vs. Donal Trump"
    ),
    subtitle = paste0(
      "Swing states are highlighted with darker boxes"
    ),
    caption = "By @MDWilliamsPhD"
  ) +
  theme(
    legend.position = "",
    panel.grid.major = element_blank(),
    axis.text = element_blank(),
    strip.background = element_blank(),
    panel.spacing = unit(0, "lines"),
    plot.subtitle = ggtext::element_markdown(
      box.color = "black",
      linewidth = 1, linetype = 1,
      padding = unit(5, "pt"),
      margin = margin(t = 5)
    )
  )
ggsave(
  here::here(
    "_figs",
    "predicted_margin_by_st.png"
  ),
  height = 6,
  width = 7,
  dpi = 500
)
```


Now simulate the election a bunch of times and generate a distribution of EC vote totals.

```{r}
## expected electoral college votes:
nw_dt |>
  summarize(
    ecv_total = sum(ecv * (prob_win > .5))
  ) |>
  pull(ecv_total) -> ecv_total

## distribution of votes:
tibble(
  it = 1:10000,
  ecv_total_sim = map(
    .x = it,
    .f = ~ nw_dt |>
      summarize(
        ecv_total = sum(ecv * rbinom(n(), 1, prob_win))
      ) |>
      pull(ecv_total)
  )
) |>
  unnest(ecv_total_sim) -> sim_results
```


```{r}
ggplot(nw_dt) +
  aes(
    x = prob_win,
    y = 1,
    fill = prob_win,
    label = paste0(round(prob_win * 100, 1), "%")
  ) +
  geom_tile(color = "black") +
  geom_tile(
    data = . %>% filter(swing == 1),
    color = "black", 
    size = 1
  ) +
  geom_text() +
  facet_geo(~ state_po,
            scales = "free") +
  #theme_void() +
  ggpal("diverging", "fill", midpoint = .5) +
  labs(
    x = NULL,
    y = NULL,
    title = paste0(
      "Predicted likelihood of victory for\nKamala Harris vs. Donald Trump"
    ),
    subtitle = paste0(
      "Swing states are highlighted with darker boxes"
    ),
    caption = "By @MDWilliamsPhD"
  ) +
  theme(
    legend.position = "",
    panel.grid.major = element_blank(),
    axis.text = element_blank(),
    strip.background = element_blank(),
    panel.spacing = unit(0, "lines"),
    plot.subtitle = ggtext::element_markdown(
      box.color = "black",
      linewidth = 1, linetype = 1,
      padding = unit(5, "pt"),
      margin = margin(t = 5)
    )
  )
ggsave(
  here::here(
    "_figs",
    "predicted_win_by_st.png"
  ),
  height = 6,
  width = 7,
  dpi = 500
)
```

```{r}
#| fig-height: 3
#| fig-width: 8
sim_results |>
  count(ecv_total_sim) |>
  ggplot() +
  aes(ecv_total_sim, n / sum(n)) +
  geom_col(
    aes(
      fill = ifelse(ecv_total_sim >= 270, 
                     "Harris Wins", "It's a tie")
    ),
    color = "black"
  ) +
  geom_text(
    aes(
      label = scales::percent(n / sum(n)),
      color = ifelse(ecv_total_sim >= 270, 
                     "Harris Wins", "It's a tie")
      ),
    vjust = -1,
    show.legend = F
  ) +
  ggpal("binary", "fill") +
  ggpal("binary", "color") +
  facet_wrap(
    ~ ecv_total_sim, 
    nrow = 1, 
    scales = "free_x",
    strip.position = "bottom"
  ) +
  labs(
    x = NULL,
    y = NULL,
    fill = NULL,
    color = NULL,
    title = "Distribution of simulated Electoral College totals",
    subtitle = paste0(
      "The most likely outcome is that Kamala Harris wins\n",
      "with ", ecv_total, " Electoral College votes."
    ),
    caption = "By @MDWilliamsPhD"
  ) +
  ylim(c(0, 1)) +
  theme(
    axis.text = element_blank(),
    panel.grid.major = element_blank()
  )
ggsave(
  here::here(
    "_figs",
    "hist_of_wins.png"
  ),
  height = 3,
  width = 8,
  dpi = 500
)
```




